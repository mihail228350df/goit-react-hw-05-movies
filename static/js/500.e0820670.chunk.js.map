{"version":3,"file":"static/js/500.e0820670.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesListItem.jsx","components/MoviesList/MoviesList.jsx","components/SearchBar/SearchBar.jsx","pages/Movies.jsx","services/api.js"],"sourcesContent":["import { NavLink, useLocation } from 'react-router-dom';\n\nexport default function MoviesListItem({ title = 'No movie title', id }) {\n  const location = useLocation();\n\n  return (\n    <li id={id}>\n      <NavLink to={`/movies/${id}`} state={{ from: location }}>\n        {title}\n      </NavLink>\n    </li>\n  );\n}","import MoviesListItem from './MoviesListItem';\nimport PropTypes from 'prop-types';\n\nexport default function MoviesList({ movies }) {\n  const moviesItem = movies.map(movie => {\n    const { id, title, original_title } = movie;\n\n    return <MoviesListItem key={id} id={id} title={original_title || title} />;\n  });\n\n  return <ol>{moviesItem}</ol>;\n}\n\nMoviesList.propTypes = {\n  movies: PropTypes.array.isRequired,\n};","import { Formik, Form, Field, ErrorMessage } from 'formik';\nimport Notiflix from 'notiflix';\nimport * as Yup from 'yup';\nimport PropTypes from 'prop-types';\n\nexport default function SearchBar({ setSearchParams }) {\n  const validationSchema = Yup.object({\n    query: Yup.string().required('Name is required'),\n  });\n\n  return (\n    <Formik\n      initialValues={{ query: '' }}\n      validationSchema={validationSchema}\n      onSubmit={(values, actions) => {\n        const query = values.query.trim();\n        if (query === '') {\n          Notiflix.Notify.warning('Enter the name of the movie!!!');\n        }\n        setSearchParams(query !== '' ? { query } : {});\n        //  actions.resetForm();\n      }}\n    >\n      <Form>\n        <Field type=\"text\" name=\"query\" />\n        <ErrorMessage name=\"query\" component=\"div\" />\n        <button type=\"submit\">Search</button>\n      </Form>\n    </Formik>\n  );\n}\n\nSearchBar.propTypes = { setSearchParams: PropTypes.func.isRequired };","import MoviesList from 'components/MoviesList/MoviesList';\nimport { useNavigate, useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { getMoviesSearhQuery } from '../services/api';\nimport { Conteiner } from 'components/GlobalStyle';\nimport SearchBar from 'components/SearchBar/SearchBar';\n\nexport default function Movies() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [movies, setMovies] = useState([]);\n  const navigate = useNavigate();\n\n  const query = searchParams.get('query');\n\n  useEffect(() => {\n    if (query) {\n      getMoviesSearhQuery(query)\n        .then(res => {\n          if (res.length === 0 && query) {\n            setSearchParams({});\n            Notiflix.Notify.failure('Not found movie this name!!!');\n          }\n          setMovies(res);\n        })\n        .catch(() => {\n          navigate('/', { replace: true });\n        });\n    }\n  }, [query, setSearchParams, navigate]);\n\n  return (\n    <Conteiner>\n      <SearchBar setSearchParams={setSearchParams} />\n      {query && <MoviesList movies={movies} />}\n    </Conteiner>\n  );\n}","import axios from 'axios';\n\nconst API_KEY = 'ab9c2583cd1a2f86525b45efd67b53f1';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nexport async function getMoviesSearhQuery(searhQuery) {\n  const response = await axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&query=${searhQuery}&page=1&include_adult=false`\n  );\n  const moviesSearhQuery = response.data.results;\n  return moviesSearhQuery;\n}\n\nexport async function getTrending() {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  const trendingMoviesArray = response.data.results;\n  return trendingMoviesArray;\n}\n\nexport async function getMovieDetails(id) {\n  const response = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n  const movieDetails = response.data;\n  return movieDetails;\n}\n\nexport async function getMovieCredits(id) {\n  const response = await axios.get(\n    `/movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  const movieCredits = response.data;\n  return movieCredits;\n}\n\nexport async function getMovieReviews(id) {\n  const response = await axios.get(\n    `movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  const movieReviews = response.data;\n  return movieReviews;\n}"],"names":["MoviesListItem","title","id","location","useLocation","to","state","from","MoviesList","moviesItem","movies","map","movie","original_title","SearchBar","setSearchParams","validationSchema","Yup","query","required","initialValues","onSubmit","values","actions","trim","Notiflix","type","name","component","Movies","useSearchParams","searchParams","useState","setMovies","navigate","useNavigate","get","useEffect","getMoviesSearhQuery","then","res","length","catch","replace","API_KEY","searhQuery","axios","response","moviesSearhQuery","data","results","getTrending","trendingMoviesArray","getMovieDetails","movieDetails","getMovieCredits","movieCredits","getMovieReviews","movieReviews"],"sourceRoot":""}